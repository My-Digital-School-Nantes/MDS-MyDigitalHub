name: Build and publish

# Environment variables
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend

on:
  push:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  code-analysis:
    name: üîé Analyze code with SonarQube
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysiss
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  build-publish-backend:
    name: üõ†Ô∏è Build and publish backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    
    steps:
      # Checkout (clone) the repository
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
    
      # Login to the Gitbub Container Registry
      - name: üê≥ Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      # Get Docker image metadata (tags, labels, etc.)
      - name: üóÉÔ∏è Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
      
      # Set up Docker Buildx (the docker build system)
      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push the docker image to repository
      - name: üõ†Ô∏è Build and ‚è´ push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          no-cache: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "HOST=0.0.0.0"
            "PORT=1337"
            "NODE_ENV=production"
            "APP_KEYS=${{ secrets.APP_KEYS }}"
            "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}"
            "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}"
            "TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}"
            "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            "DATABASE_CLIENT=mysql"
            "DATABASE_PORT=3306"
            "DATABASE_NAME=myDigitalHub"
            "DATABASE_USERNAME=strapi"
            "DATABASE_PASSWORD=strapi"
            


          
